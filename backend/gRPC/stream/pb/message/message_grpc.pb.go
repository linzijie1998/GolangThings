// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0--rc2
// source: message/message.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	ServerStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_ServerStreamClient, error)
	ClientStream(ctx context.Context, in *Req, opts ...grpc.CallOption) (MessageService_ClientStreamClient, error)
	BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_BidirectionalStreamClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) ServerStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], "/message.MessageService/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceServerStreamClient{stream}
	return x, nil
}

type MessageService_ServerStreamClient interface {
	Send(*Req) error
	CloseAndRecv() (*Resp, error)
	grpc.ClientStream
}

type messageServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceServerStreamClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceServerStreamClient) CloseAndRecv() (*Resp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) ClientStream(ctx context.Context, in *Req, opts ...grpc.CallOption) (MessageService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], "/message.MessageService/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceClientStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_ClientStreamClient interface {
	Recv() (*Resp, error)
	grpc.ClientStream
}

type messageServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceClientStreamClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) BidirectionalStream(ctx context.Context, opts ...grpc.CallOption) (MessageService_BidirectionalStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[2], "/message.MessageService/BidirectionalStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceBidirectionalStreamClient{stream}
	return x, nil
}

type MessageService_BidirectionalStreamClient interface {
	Send(*Req) error
	Recv() (*Resp, error)
	grpc.ClientStream
}

type messageServiceBidirectionalStreamClient struct {
	grpc.ClientStream
}

func (x *messageServiceBidirectionalStreamClient) Send(m *Req) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceBidirectionalStreamClient) Recv() (*Resp, error) {
	m := new(Resp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	ServerStream(MessageService_ServerStreamServer) error
	ClientStream(*Req, MessageService_ClientStreamServer) error
	BidirectionalStream(MessageService_BidirectionalStreamServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) ServerStream(MessageService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedMessageServiceServer) ClientStream(*Req, MessageService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedMessageServiceServer) BidirectionalStream(MessageService_BidirectionalStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStream not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).ServerStream(&messageServiceServerStreamServer{stream})
}

type MessageService_ServerStreamServer interface {
	SendAndClose(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type messageServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceServerStreamServer) SendAndClose(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceServerStreamServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MessageService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Req)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).ClientStream(m, &messageServiceClientStreamServer{stream})
}

type MessageService_ClientStreamServer interface {
	Send(*Resp) error
	grpc.ServerStream
}

type messageServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceClientStreamServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_BidirectionalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).BidirectionalStream(&messageServiceBidirectionalStreamServer{stream})
}

type MessageService_BidirectionalStreamServer interface {
	Send(*Resp) error
	Recv() (*Req, error)
	grpc.ServerStream
}

type messageServiceBidirectionalStreamServer struct {
	grpc.ServerStream
}

func (x *messageServiceBidirectionalStreamServer) Send(m *Resp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceBidirectionalStreamServer) Recv() (*Req, error) {
	m := new(Req)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStream",
			Handler:       _MessageService_ServerStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _MessageService_ClientStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BidirectionalStream",
			Handler:       _MessageService_BidirectionalStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "message/message.proto",
}
